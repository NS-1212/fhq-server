// This file was automatically generated by fhq-server (v0.2.36), date: 14 Mar 2021
import { Injectable, EventEmitter } from '@angular/core';
import { PlatformLocation } from '@angular/common';
import { Observable } from 'rxjs';

declare var FreeHackQuestClientConfig: any;

@Injectable({
  providedIn: 'root'
})
export class FreeHackQuestClient {
  private appName: string = 'fhq-server';
  private appVersion: string = 'v0.2.36';
  private appBuildDate: string = '14 Mar 2021';
  isAuthorized: boolean = false;
  connectionState: string = '';
  serverHost: string = 'localhost';
  currentProtocol: string = 'http:';
  private _tokenName: string = 'fhqtoken';
  userdata: any = {};
  private changedState = new EventEmitter<any>();
  private failedAttemps: number = 0;
  private messageId: number = 0;
  private waitResponseById: any = {};
  private _lastm: number = 0;
  private _listeners: any = {};
  private _connectionState: string = '?';
  private _tokenValue: string = '';
  private _wsSocket: WebSocket = null;
  private _events: any = {
    'server': [],
    'notify': [],
    'chat': [],
    'connected': [],
    'reconnecting': [],
    'disconnected': [],
    'broken': [],
    'userdata': [],
  };
  private _lastConnectionParams: any = null;

  constructor(
    private _location: PlatformLocation,
  ) {
    this.serverHost = this._location.hostname;
    // this.serverHost = 'freehackquest.com';
    this.currentProtocol = this._location.protocol;
    console.warn('fhq (v0.2.36)');
    this._tokenValue = this.getToken();

    this.bind('server', ((response) => { 
        console.warn('All: ', response);
        if (response.app != this.appName) {
            console.error('FreeHackQuestClient, AppName: ' + response.app + ', but expected ' + this.appName);
        }
        if (response.version != this.appVersion) {
            console.error('FreeHackQuestClient, AppVersion: ' + response.version + ', but expected ' + this.appVersion);
        }
    }));
  }

  setToken(token: string) {
    var date = new Date( new Date().getTime() + (7 * 24 * 60 * 60 * 1000) ); // cookie on week
    document.cookie = this._tokenName + '=' + encodeURIComponent(token) + '; path=/; expires='+date.toUTCString();
  }
  
  removeToken() {
    this._tokenValue = '';
    document.cookie = this._tokenName + '=; path=/;';
  }

  getToken() {
    var matches = document.cookie.match(new RegExp(
      '(?:^|; )' + this._tokenName.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'
    ));
    return matches ? decodeURIComponent(matches[1]) : '';
  }

  bind(name: string, f: Function) {
    this._events[name].push(f);
  }

  unbind(name: string) {
    this._events[name] = [];
  }

  _call(name: string, data: any) {
    function __call(f: any, data: any) {
      setTimeout(function() { f(data) },1)
    }
    for (var i = 0; i < this._events[name].length; i++) {
      __call(this._events[name][i], data);
    }
  }

  private socketOnOpen() {
    console.log('FreeHackQuestClient WS Opened');
    this._call('connected', {});
    if (this._tokenValue != '') this.token({});
  }

  private socketOnClose(event: any) {
    console.log('FreeHackQuestClient Closed');
    if (event.wasClean) {
        this._call('disconnected', {});
    } else {
        this._call('broken', {});
        setTimeout(function() {
            this._call('reconnecting', {});
            if (this._lastConnectionParams != null) {
                this.wsConnectToServer(this._lastConnectionParams);
            }
        }, 10000);
        // Try reconnect after 10 sec
    }
    console.log('Code: ' + event.code + ' Reason: ' + event.reason);
  }

  private _socketOnMessage(event: any) {
    console.log('FreeHackQuestClient Received: ' + event.data);
    try {
        var response = JSON.parse(event.data);
        // this._handleCommand(response);
    } catch(e) {
        console.error(e);
    }
  }

  private _socketOnError(error: any) {
    console.log('FreeHackQuestClient Socket Error: ', error);
  }

  wsConnectToServer(initParams: any) {
    this._lastConnectionParams = null;
    if (!initParams.baseUrl) console.error('Expected baseUrl on initParams');
    this._lastConnectionParams = initParams;
    this._wsSocket = new WebSocket(initParams.baseUrl);
    this._wsSocket.onopen = (() => this.socketOnOpen());
    this._wsSocket.onclose = ((event: any) => this.socketOnClose(event));
    this._wsSocket.onmessage = ((event: any) => this._socketOnMessage(event));
    this._wsSocket.onerror = ((error: any) => this._socketOnError(error));
  }

  wsConnected() {
    this.connectionState = 'OK';
    this.changedState.emit();
  }

  wsWait() {
    this.connectionState = 'WAIT';
    this.changedState.emit();
  }

  wsBroken() {
    this.connectionState = 'BROKEN';
    this.changedState.emit();
  }

  wsHandleMessage(data: any) {
    if (data['id']) {
      const msgid = data['id'];
      if (this.waitResponseById[msgid]) {
        if (data['error']) {
          this.waitResponseById[msgid].error(data['error'])
        } else {
          this.waitResponseById[msgid].next(data['result'])
        }
        this.waitResponseById[msgid].complete();
        this.waitResponseById[msgid] = null
      } else {
        console.error('Not found observer for ', msgid)
      }
    } else {
      console.error('Not found id in incoming message')
    }
  }
  wsSendMessage(request: string): void {
    if (this.connectionState == "OK") {
      this._wsSocket.send(request)
    } else { // if (this.connectionState == "WAIT")
      setTimeout(() => {
        this.wsSendMessage(request)
      }, 1000)
    }
  }
  wsRequest(method: string, params: any): Observable<any> {
    this.messageId++
    const msgid = "m" + this.messageId;
    let request = params;
    request["jsonrpc"] = "2.0";
    request["m"] = msgid;
    request["cmd"] = method;
    request["params"] = params;
    
    let ret = new Observable(observer => {
      if (this.connectionState != "OK" && this.connectionState != "WAIT") {
        observer.error("Server not responding... (" + this.connectionState + ")")
        observer.complete()
        return
      }
      this.wsSendMessage(JSON.stringify(request))
      this.waitResponseById[msgid] = observer
    });
    return ret
  }

  private _lm() { this._lastm++; return 'm' + this._lastm; };

  send(obj: any, def: any = null) {
    obj.m = obj.m || this._lm();
    this._listeners[obj.m] = def || this.promise();
    try {
      if (this._wsSocket.readyState == 0) {
        setTimeout(function() {
          this.send(obj, this._listeners[obj.m]);
        },1000);
      } else {
        this._wsSocket.send(JSON.stringify(obj));
      }
    } catch(e) {
      console.error(e);
    }
    return this._listeners[obj.m];
  }
  
  promise() {
    return {
        completed: false, failed: false, successed: false, 
        done: function(callback) {
            this.done_callback = callback;
            if (this.completed && typeof this.done_callback === 'function' && this.successed) {
                this.done_callback.apply(this, this.result_arguments);
            }
            return this;
        },
        fail: function(callback) {
            this.fail_callback = callback;
            if (this.completed && typeof this.fail_callback === 'function' && this.failed) {
                this.fail_callback.apply(this, this.error_arguments);
            }
            return this;
        },
        resolve: function(result: any = null) {
            if (!this.completed) {
                this.result_arguments = arguments; // [];
                if (typeof this.done_callback === 'function') {
                    this.done_callback.apply(this, this.result_arguments);
                }
            }
            this.successed = true;
            this.completed = true;
        },
        reject: function(error: any = null) {
            if (!this.completed) {
                this.error_arguments = arguments;
                if (typeof this.fail_callback === 'function') {
                    this.fail_callback.apply(this, this.error_arguments);
                }
            }
            this.failed = true;
            this.completed = true;
        }
    }
  }
  private _handleCommand(response: any) {
    var lstn = this._listeners[response.m];
    if (lstn) {
        setTimeout(function() {
            if (response['error']) {
                lstn.reject(response);
            } else {
                lstn.resolve(response);
            }
            delete this._listeners[response.m];
        },1);
    } else if (this._events[response.cmd]) {
        this._call(response.cmd, response);
    } else {
        console.error('Not found handler for [' + response.cmd + '/' + response.m + ']');
    }
  };

  addhint(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * questid - integer, required (quest id) 
    // * hint - string, required (hint text) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    if (value['hint'] == undefined) {
      console.error('Parameter "hint" expected (lib)');
    }
    return this.wsRequest('addhint', value);

  }

  answerlist(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * page - integer, required (Number of page) 
    // * onpage - integer, required (How much rows on page) 
    // * questid - integer, optional (Filter for questid) 
    // * userid - integer, optional (Filter for userid) 
    if (value['page'] == undefined) {
      console.error('Parameter "page" expected (lib)');
    }
    if (value['onpage'] == undefined) {
      console.error('Parameter "onpage" expected (lib)');
    }
    return this.wsRequest('answerlist', value);

  }

  chat_latest_messages(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('chat_latest_messages', value);

  }

  chat_send_message(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * type - string, required (Type) 
    // * message - string, required (Message) 
    if (value['type'] == undefined) {
      console.error('Parameter "type" expected (lib)');
    }
    if (value['message'] == undefined) {
      console.error('Parameter "message" expected (lib)');
    }
    return this.wsRequest('chat_send_message', value);

  }

  chats_add_to_black_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_add_to_black_list', value);

  }

  chats_add_to_chat(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_add_to_chat', value);

  }

  chats_change_owner(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_change_owner', value);

  }

  chats_create_group_chat(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_create_group_chat', value);

  }

  chats_delete_from_black_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_delete_from_black_list', value);

  }

  chats_delete_from_chat(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_delete_from_chat', value);

  }

  chats_dialogs_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    return this.wsRequest('chats_dialogs_list', value);

  }

  chats_message_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    // Input params:
    // * message_id - integer, required (Message id for remove) 
    if (value['message_id'] == undefined) {
      console.error('Parameter "message_id" expected (lib)');
    }
    return this.wsRequest('chats_message_delete', value);

  }

  chats_message_edit(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    // Input params:
    // * message_id - integer, required (Message id) 
    // * message_new - string, required (New message) 
    if (value['message_id'] == undefined) {
      console.error('Parameter "message_id" expected (lib)');
    }
    if (value['message_new'] == undefined) {
      console.error('Parameter "message_new" expected (lib)');
    }
    return this.wsRequest('chats_message_edit', value);

  }

  chats_message_read(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    // Input params:
    // * chat - string, required (Chat for reading messages) 
    if (value['chat'] == undefined) {
      console.error('Parameter "chat" expected (lib)');
    }
    return this.wsRequest('chats_message_read', value);

  }

  chats_message_send(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.24
    // Input params:
    // * chat - string, required (Chat for sending a message) 
    // * message - string, required (Message) 
    if (value['chat'] == undefined) {
      console.error('Parameter "chat" expected (lib)');
    }
    if (value['message'] == undefined) {
      console.error('Parameter "message" expected (lib)');
    }
    return this.wsRequest('chats_message_send', value);

  }

  classbook_add_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * parentid - integer, required (pareintid for classbook article) 
    // * name - string, required (name of article) 
    // * content - string, required (content of article) 
    // * uuid - string, optional (uuid of article) 
    // * ordered - integer, optional (order of article) 
    if (value['parentid'] == undefined) {
      console.error('Parameter "parentid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    return this.wsRequest('classbook_add_record', value);

  }

  classbook_delete_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (id for classbook article) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    return this.wsRequest('classbook_delete_record', value);

  }

  classbook_export(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * output - string, required (The output file format) 
    // * lang - string, required (The output file format) 
    // * zip - boolean, optional (Zipping the output) 
    if (value['output'] == undefined) {
      console.error('Parameter "output" expected (lib)');
    }
    if (value['lang'] == undefined) {
      console.error('Parameter "lang" expected (lib)');
    }
    return this.wsRequest('classbook_export', value);

  }

  classbook_info(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (id for the classbook article) 
    // * lang - string, optional (Set lang for the article) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    return this.wsRequest('classbook_info', value);

  }

  classbook_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * parentid - integer, required (parentid for classbook articles) 
    // * lang - string, optional (lang for classbook articles) 
    // * search - string, optional (Search string for classbook articles) 
    if (value['parentid'] == undefined) {
      console.error('Parameter "parentid" expected (lib)');
    }
    return this.wsRequest('classbook_list', value);

  }

  classbook_localization_add_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (Classbookid for article localization) 
    // * lang - string, required (Language) 
    // * name - string, required (Article name) 
    // * content - string, required (The content of the article) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    if (value['lang'] == undefined) {
      console.error('Parameter "lang" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    return this.wsRequest('classbook_localization_add_record', value);

  }

  classbook_localization_delete_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_localizationid - integer, required (Localization id) 
    if (value['classbook_localizationid'] == undefined) {
      console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    return this.wsRequest('classbook_localization_delete_record', value);

  }

  classbook_localization_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_localizationid - integer, required (Localization id) 
    if (value['classbook_localizationid'] == undefined) {
      console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    return this.wsRequest('classbook_localization_info', value);

  }

  classbook_localization_update_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_localizationid - integer, required (Localization id) 
    // * name - string, required (Article name) 
    // * content - string, required (The content of the article) 
    if (value['classbook_localizationid'] == undefined) {
      console.error('Parameter "classbook_localizationid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    return this.wsRequest('classbook_localization_update_record', value);

  }

  classbook_propasal_approve(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_proposal_id - integer, required (Proposal id) 
    if (value['classbook_proposal_id'] == undefined) {
      console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return this.wsRequest('classbook_propasal_approve', value);

  }

  classbook_propasal_prepare_merge_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_proposal_id - integer, required (Proposal id) 
    if (value['classbook_proposal_id'] == undefined) {
      console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return this.wsRequest('classbook_propasal_prepare_merge_record', value);

  }

  classbook_propasal_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbook_proposal_id - integer, required (Proposal id) 
    // * content - string, required (new content) 
    if (value['classbook_proposal_id'] == undefined) {
      console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    return this.wsRequest('classbook_propasal_update', value);

  }

  classbook_proposal_add_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (Classbookid for an article) 
    // * lang - string, required (Language) 
    // * name - string, required (Article name) 
    // * content - string, required (The content of the article) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    if (value['lang'] == undefined) {
      console.error('Parameter "lang" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    return this.wsRequest('classbook_proposal_add_record', value);

  }

  classbook_proposal_delete_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * classbook_proposal_id - integer, required (Proposal id) 
    if (value['classbook_proposal_id'] == undefined) {
      console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return this.wsRequest('classbook_proposal_delete_record', value);

  }

  classbook_proposal_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * classbook_proposal_id - integer, required (Proposal id) 
    if (value['classbook_proposal_id'] == undefined) {
      console.error('Parameter "classbook_proposal_id" expected (lib)');
    }
    return this.wsRequest('classbook_proposal_info', value);

  }

  classbook_proposal_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (Classbookid for an article) 
    // * lang - string, optional (Language) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    return this.wsRequest('classbook_proposal_list', value);

  }

  classbook_update_record(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * classbookid - integer, required (id for classbook article) 
    // * name - string, optional (name for classbook article) 
    // * content - string, optional (content for classbook article) 
    // * ordered - integer, optional (ordered for classbook article) 
    // * parentid - integer, optional (parentid for classbook article) 
    if (value['classbookid'] == undefined) {
      console.error('Parameter "classbookid" expected (lib)');
    }
    return this.wsRequest('classbook_update_record', value);

  }

  createpublicevent(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * type - string, required (Type of event) 
    // * message - string, required (Message) 
    if (value['type'] == undefined) {
      console.error('Parameter "type" expected (lib)');
    }
    if (value['message'] == undefined) {
      console.error('Parameter "message" expected (lib)');
    }
    return this.wsRequest('createpublicevent', value);

  }

  quests_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the quest) 
    // * gameid - integer, required (Which game included this quest) 
    // * name - string, required (Name of the quest) 
    // * text - string, required (Description of the quest) 
    // * score - integer, required (How much append to user score after solve quest by them) 
    // * author - string, required (Author of the quest) 
    // * subject - string, required (Subject must be one from types) 
    // * answer - string, required (Answer for the quest) 
    // * answer_format - string, required (Answer format for the quest) 
    // * state - string, required (State of the quest) 
    // * description_state - string, required (You can add some descriptions for quest state) 
    // * copyright - string, optional (You can add some copyright information) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['gameid'] == undefined) {
      console.error('Parameter "gameid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['text'] == undefined) {
      console.error('Parameter "text" expected (lib)');
    }
    if (value['score'] == undefined) {
      console.error('Parameter "score" expected (lib)');
    }
    if (value['author'] == undefined) {
      console.error('Parameter "author" expected (lib)');
    }
    if (value['subject'] == undefined) {
      console.error('Parameter "subject" expected (lib)');
    }
    if (value['answer'] == undefined) {
      console.error('Parameter "answer" expected (lib)');
    }
    if (value['answer_format'] == undefined) {
      console.error('Parameter "answer_format" expected (lib)');
    }
    if (value['state'] == undefined) {
      console.error('Parameter "state" expected (lib)');
    }
    if (value['description_state'] == undefined) {
      console.error('Parameter "description_state" expected (lib)');
    }
    return this.wsRequest('quests.add', value);

  }

  deletehint(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * hintid - integer, required (hint id) 
    if (value['hintid'] == undefined) {
      console.error('Parameter "hintid" expected (lib)');
    }
    return this.wsRequest('deletehint', value);

  }

  deletepublicevent(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * eventid - integer, required (Event ID) 
    if (value['eventid'] == undefined) {
      console.error('Parameter "eventid" expected (lib)');
    }
    return this.wsRequest('deletepublicevent', value);

  }

  feedback_add(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * from - string, required (From user) 
    // * text - string, required (Text of feedback) 
    // * type - string, required (Type of feedback) 
    if (value['from'] == undefined) {
      console.error('Parameter "from" expected (lib)');
    }
    if (value['text'] == undefined) {
      console.error('Parameter "text" expected (lib)');
    }
    if (value['type'] == undefined) {
      console.error('Parameter "type" expected (lib)');
    }
    return this.wsRequest('feedback_add', value);

  }

  game_create(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.0
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    // * name - string, required (Name of the Game) 
    // * description - string, required (Description of the Game) 
    // * state - string, required (State of the game) 
    // * form - string, required (Form of the game) 
    // * type - string, required (Type of the game) 
    // * date_start - string, required (Date start) 
    // * date_stop - string, required (Date stop) 
    // * date_restart - string, required (Date restart) 
    // * organizators - string, required (Organizators) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['description'] == undefined) {
      console.error('Parameter "description" expected (lib)');
    }
    if (value['state'] == undefined) {
      console.error('Parameter "state" expected (lib)');
    }
    if (value['form'] == undefined) {
      console.error('Parameter "form" expected (lib)');
    }
    if (value['type'] == undefined) {
      console.error('Parameter "type" expected (lib)');
    }
    if (value['date_start'] == undefined) {
      console.error('Parameter "date_start" expected (lib)');
    }
    if (value['date_stop'] == undefined) {
      console.error('Parameter "date_stop" expected (lib)');
    }
    if (value['date_restart'] == undefined) {
      console.error('Parameter "date_restart" expected (lib)');
    }
    if (value['organizators'] == undefined) {
      console.error('Parameter "organizators" expected (lib)');
    }
    return this.wsRequest('game_create', value);

  }

  game_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    // * admin_password - string, required (Admin Password) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['admin_password'] == undefined) {
      console.error('Parameter "admin_password" expected (lib)');
    }
    return this.wsRequest('game_delete', value);

  }

  game_export(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    return this.wsRequest('game_export', value);

  }

  game_import(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    return this.wsRequest('game_import', value);

  }

  game_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    return this.wsRequest('game_info', value);

  }

  game_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    // * name - string, optional (Name of the Game) 
    // * description - string, optional (Description of the Game) 
    // * state - string, optional (State of the game) 
    // * form - string, optional (Form of the game) 
    // * type - string, optional (Type of the game) 
    // * date_start - string, optional (Date start) 
    // * date_stop - string, optional (Date stop) 
    // * date_restart - string, optional (Date restart) 
    // * organizators - string, optional (Organizators) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    return this.wsRequest('game_update', value);

  }

  game_update_logo(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (Global Identificator of the Game) 
    // * image_png_base64 - string, required (Image PNG in Base64) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['image_png_base64'] == undefined) {
      console.error('Parameter "image_png_base64" expected (lib)');
    }
    return this.wsRequest('game_update_logo', value);

  }

  games(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('games', value);

  }

  getmap(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('getmap', value);

  }

  getpublicevent(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * eventid - integer, required (Event id) 
    if (value['eventid'] == undefined) {
      console.error('Parameter "eventid" expected (lib)');
    }
    return this.wsRequest('getpublicevent', value);

  }

  hints(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest id) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('hints', value);

  }

  leaks_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * uuid - string, required (UUID of the leak) 
    // * game_uuid - string, required (UUID of the game) 
    // * name - string, required (Visible part of the content) 
    // * content - string, required (Content of the leak) 
    // * score - integer, required (Price of the leak) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['game_uuid'] == undefined) {
      console.error('Parameter "game_uuid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['content'] == undefined) {
      console.error('Parameter "content" expected (lib)');
    }
    if (value['score'] == undefined) {
      console.error('Parameter "score" expected (lib)');
    }
    return this.wsRequest('leaks_add', value);

  }

  leaks_buy(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: no
    // Input params:
    // * id - integer, required (Leak id) 
    if (value['id'] == undefined) {
      console.error('Parameter "id" expected (lib)');
    }
    return this.wsRequest('leaks_buy', value);

  }

  leaks_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * id - integer, required (Leak id) 
    if (value['id'] == undefined) {
      console.error('Parameter "id" expected (lib)');
    }
    return this.wsRequest('leaks_delete', value);

  }

  leaks_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * page - integer, required (Number of page) 
    // * onpage - integer, required (How much rows in one page) 
    if (value['page'] == undefined) {
      console.error('Parameter "page" expected (lib)');
    }
    if (value['onpage'] == undefined) {
      console.error('Parameter "onpage" expected (lib)');
    }
    return this.wsRequest('leaks_list', value);

  }

  leaks_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * id - integer, required (Leak id) 
    // * name - string, optional (Visible part of the content) 
    // * content - string, optional (Content of the leak) 
    // * score - integer, optional (Price of the leak) 
    if (value['id'] == undefined) {
      console.error('Parameter "id" expected (lib)');
    }
    return this.wsRequest('leaks_update', value);

  }

  login(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * email - string, required (E-mail) 
    // * password - string, required (Password) 
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    if (value['password'] == undefined) {
      console.error('Parameter "password" expected (lib)');
    }
        // var ret = self.promise()
        // self.send(params).done(function(r) {
        //   _tokenValue = r.token;
        //   console.log(_tokenValue);
        //   self.userinfo = r.user;
        //   self.setToken(_tokenValue);
        //   self.updateUserProfileAsync();
        //   ret.resolve(r);
        // }).fail(function(err) {
        //   self.removeToken();
        //   ret.reject(err);
        // })
      return this.wsRequest('login', value);
  }

  lxd_containers(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Container name) 
    // * action - string, required (Actions: create, start, stop and delete container) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['action'] == undefined) {
      console.error('Parameter "action" expected (lib)');
    }
    return this.wsRequest('lxd_containers', value);

  }

  lxd_exec(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Container name) 
    // * command - string, required (Name of execution command) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['command'] == undefined) {
      console.error('Parameter "command" expected (lib)');
    }
    return this.wsRequest('lxd_exec', value);

  }

  lxd_file(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Container name) 
    // * action - string, required (Action with files: pull, push or delete) 
    // * path - string, required (Path to file inside the container) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['action'] == undefined) {
      console.error('Parameter "action" expected (lib)');
    }
    if (value['path'] == undefined) {
      console.error('Parameter "path" expected (lib)');
    }
    return this.wsRequest('lxd_file', value);

  }

  lxd_import_container(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * config - string, required (Container's configuration in json dumped string.) 
    if (value['config'] == undefined) {
      console.error('Parameter "config" expected (lib)');
    }
    return this.wsRequest('lxd_import_container', value);

  }

  lxd_import_service_from_zip(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * zip_file - string, required (Service's configuration in Base64 zip archive.) 
    if (value['zip_file'] == undefined) {
      console.error('Parameter "zip_file" expected (lib)');
    }
    return this.wsRequest('lxd_import_service_from_zip', value);

  }

  lxd_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Container name) 
    // * get - string, optional (Requested information) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    return this.wsRequest('lxd_info', value);

  }

  lxd_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    return this.wsRequest('lxd_list', value);

  }

  lxd_open_port(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Container name) 
    // * port - integer, required (Number container port) 
    // * protocol - string, required (Protocol) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['port'] == undefined) {
      console.error('Parameter "port" expected (lib)');
    }
    if (value['protocol'] == undefined) {
      console.error('Parameter "protocol" expected (lib)');
    }
    return this.wsRequest('lxd_open_port', value);

  }

  lxd_start_service(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (Service's name.) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    return this.wsRequest('lxd_start_service', value);

  }

  mail_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    return this.wsRequest('mail_info', value);

  }

  mail_send(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * to - string, required (E-mail of the recipient) 
    // * subject - string, required (Subject of the message) 
    // * body - string, required (Body of the message) 
    if (value['to'] == undefined) {
      console.error('Parameter "to" expected (lib)');
    }
    if (value['subject'] == undefined) {
      console.error('Parameter "subject" expected (lib)');
    }
    if (value['body'] == undefined) {
      console.error('Parameter "body" expected (lib)');
    }
    return this.wsRequest('mail_send', value);

  }

  mails_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * filter_email - string, optional (Filter by email) 
    // * filter_subject - string, optional (Filter by subject) 
    // * filter_message - string, optional (Filter by message) 
    // * onpage - integer, optional (On page) 
    // * page - integer, optional (page) 
    return this.wsRequest('mails_list', value);

  }

  public_info(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('public_info', value);

  }

  publiceventslist(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * page - integer, required (Number of page) 
    // * onpage - integer, required (How much rows in one page) 
    // * type - string, optional (Filter by type events) 
    // * search - string, optional (Filter by message event) 
    if (value['page'] == undefined) {
      console.error('Parameter "page" expected (lib)');
    }
    if (value['onpage'] == undefined) {
      console.error('Parameter "onpage" expected (lib)');
    }
    return this.wsRequest('publiceventslist', value);

  }

  quest(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest ID) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quest', value);

  }

  quest_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest ID) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quest_delete', value);

  }

  quest_pass(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest ID) 
    // * answer - string, required (Answer) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    if (value['answer'] == undefined) {
      console.error('Parameter "answer" expected (lib)');
    }
    return this.wsRequest('quest_pass', value);

  }

  quest_proposal(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * gameid - integer, required (Which game included this quest) 
    // * name - string, required (Name of the quest) 
    // * text - string, required (Description of the quest) 
    // * score - integer, required (How much append to user score after solve quest by them) 
    // * author - string, required (Author of the quest) 
    // * subject - string, required (Subject must be one from types (look types)) 
    // * answer - string, required (Answer for the quest) 
    // * answer_format - string, required (Answer format for the quest) 
    if (value['gameid'] == undefined) {
      console.error('Parameter "gameid" expected (lib)');
    }
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['text'] == undefined) {
      console.error('Parameter "text" expected (lib)');
    }
    if (value['score'] == undefined) {
      console.error('Parameter "score" expected (lib)');
    }
    if (value['author'] == undefined) {
      console.error('Parameter "author" expected (lib)');
    }
    if (value['subject'] == undefined) {
      console.error('Parameter "subject" expected (lib)');
    }
    if (value['answer'] == undefined) {
      console.error('Parameter "answer" expected (lib)');
    }
    if (value['answer_format'] == undefined) {
      console.error('Parameter "answer_format" expected (lib)');
    }
    return this.wsRequest('quest_proposal', value);

  }

  quest_statistics(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest ID) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quest_statistics', value);

  }

  quest_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * questid - integer, required (Quest ID) 
    // * name - string, optional (Name of the quest) 
    // * gameid - integer, optional (Which game included this quest) 
    // * text - string, optional (Description of the quest) 
    // * score - integer, optional (How much append to user score after solve quest by them) 
    // * subject - string, optional (Subject must be one from types) 
    // * author - string, optional (Author of the quest) 
    // * answer - string, optional (Answer for the quest) 
    // * answer_format - string, optional (Answer format for the quest) 
    // * state - string, optional (State of the quest) 
    // * description_state - string, optional (You can update some descriptions for quest state) 
    // * copyright - string, optional (You can update copyright) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quest_update', value);

  }

  quests(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * subject - string, optional (Filter by subject) 
    // * gameid - integer, optional (Filter by local gameid) 
    // * filter - string, optional (Filter by some text) 
    return this.wsRequest('quests', value);

  }

  quests_files_upload(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * quest_uuid - string, required (Quest UUID) 
    // * file_base64 - string, required (Byte-array encoded in base64) 
    // * file_name - string, required (File name) 
    if (value['quest_uuid'] == undefined) {
      console.error('Parameter "quest_uuid" expected (lib)');
    }
    if (value['file_base64'] == undefined) {
      console.error('Parameter "file_base64" expected (lib)');
    }
    if (value['file_name'] == undefined) {
      console.error('Parameter "file_name" expected (lib)');
    }
    return this.wsRequest('quests_files_upload', value);

  }

  quests_proposal_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * page_size - integer, optional (Pgae size) 
    // * page_index - integer, optional (Page index) 
    return this.wsRequest('quests_proposal_list', value);

  }

  quests_subjects(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('quests_subjects', value);

  }

  quests_user_answer_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: no
    // Input params:
    // * questid - integer, required (Filter for questid) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quests_user_answer_list', value);

  }

  quests_writeups_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.18
    // Input params:
    // * writeupid - integer, required (WriteUp ID) 
    if (value['writeupid'] == undefined) {
      console.error('Parameter "writeupid" expected (lib)');
    }
    return this.wsRequest('quests_writeups_delete', value);

  }

  quests_writeups_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.18
    // Input params:
    // * questid - integer, required (Quest ID) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    return this.wsRequest('quests_writeups_list', value);

  }

  quests_writeups_proposal(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.18
    // Input params:
    // * questid - integer, required (Quest ID) 
    // * writeup_link - string, required (Link to writeup (Must be start from https://www.youtube.com/watch?v=)) 
    if (value['questid'] == undefined) {
      console.error('Parameter "questid" expected (lib)');
    }
    if (value['writeup_link'] == undefined) {
      console.error('Parameter "writeup_link" expected (lib)');
    }
    return this.wsRequest('quests_writeups_proposal', value);

  }

  quests_writeups_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.18
    // Input params:
    // * writeupid - integer, required (WriteUp ID) 
    // * approve - string, required (Approve value 1 or 0) 
    if (value['writeupid'] == undefined) {
      console.error('Parameter "writeupid" expected (lib)');
    }
    if (value['approve'] == undefined) {
      console.error('Parameter "approve" expected (lib)');
    }
    return this.wsRequest('quests_writeups_update', value);

  }

  registration(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * email - string, required (E-mail) 
    // * university - string, required (University) 
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    if (value['university'] == undefined) {
      console.error('Parameter "university" expected (lib)');
    }
    return this.wsRequest('registration', value);

  }

  scoreboard(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * page - integer, required (Number of page) 
    // * onpage - integer, required (How much rows in one page) 
    if (value['page'] == undefined) {
      console.error('Parameter "page" expected (lib)');
    }
    if (value['onpage'] == undefined) {
      console.error('Parameter "onpage" expected (lib)');
    }
    return this.wsRequest('scoreboard', value);

  }

  server_api(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    return this.wsRequest('server_api', value);

  }

  server_info(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    return this.wsRequest('server_info', value);

  }

  server_settings(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    return this.wsRequest('server_settings', value);

  }

  server_settings_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * name - string, required (name of setting) 
    // * value - string, required (value of setting) 
    if (value['name'] == undefined) {
      console.error('Parameter "name" expected (lib)');
    }
    if (value['value'] == undefined) {
      console.error('Parameter "value" expected (lib)');
    }
    return this.wsRequest('server_settings_update', value);
  }

  token(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * token - string, required (Authorization token) 
    if (value['token'] == undefined) {
      console.error('Parameter "token" expected (lib)');
    }
        // if (_tokenValue != '') {
        //   var ret = self.promise()
        //   params.token = _tokenValue;
        //   self.send(params).done(function(r) {
        //     self.updateUserProfileAsync();
        //     ret.resolve(r);
        //   }).fail(function(err) {
        //     self.removeToken();
        //     _call('userdata', {});
        //     ret.reject(err);
        //   })
        //   return ret;
        // } else {
        //   return self.send(params);
        // }
    return this.wsRequest('token', value);
  }

  updateuserlocation(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * userid - integer, required (User ID) 
    if (value['userid'] == undefined) {
      console.error('Parameter "userid" expected (lib)');
    }
    return this.wsRequest('updateuserlocation', value);

  }

  useful_links_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.21
    // Input params:
    // * url - string, required (URL) 
    // * description - string, required (Description) 
    // * author - string, required (Author) 
    if (value['url'] == undefined) {
      console.error('Parameter "url" expected (lib)');
    }
    if (value['description'] == undefined) {
      console.error('Parameter "description" expected (lib)');
    }
    if (value['author'] == undefined) {
      console.error('Parameter "author" expected (lib)');
    }
    return this.wsRequest('useful_links_add', value);

  }

  useful_links_clicked(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_clicked', value);

  }

  useful_links_comment_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    // * comment - string, required (Comment) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    if (value['comment'] == undefined) {
      console.error('Parameter "comment" expected (lib)');
    }
    return this.wsRequest('useful_links_comment_add', value);

  }

  useful_links_comment_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_comment_id - integer, required (Comment Id for useful link) 
    if (value['useful_link_comment_id'] == undefined) {
      console.error('Parameter "useful_link_comment_id" expected (lib)');
    }
    return this.wsRequest('useful_links_comment_delete', value);

  }

  useful_links_comment_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_comment_list', value);

  }

  useful_links_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.21
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_delete', value);

  }

  useful_links_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.21
    // Input params:
    // * filter - string, optional (Filter by word) 
    // * filter_by_tag - string, optional (Filter by tag) 
    // * page_index - integer, optional (Page Index) 
    // * page_size - integer, optional (Page Size (default 10)) 
    return this.wsRequest('useful_links_list', value);

  }

  useful_links_retrieve(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.28
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_retrieve', value);

  }

  useful_links_tag_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    // * tag - string, required (Tag Value) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    if (value['tag'] == undefined) {
      console.error('Parameter "tag" expected (lib)');
    }
    return this.wsRequest('useful_links_tag_add', value);

  }

  useful_links_tag_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Useful Link Id) 
    // * tag - string, required (Tag Value) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    if (value['tag'] == undefined) {
      console.error('Parameter "tag" expected (lib)');
    }
    return this.wsRequest('useful_links_tag_delete', value);

  }

  useful_links_tag_list(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    return this.wsRequest('useful_links_tag_list', value);

  }

  useful_links_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.21
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    // * url - string, required (URL) 
    // * description - string, required (Description) 
    // * author - string, required (Author) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    if (value['url'] == undefined) {
      console.error('Parameter "url" expected (lib)');
    }
    if (value['description'] == undefined) {
      console.error('Parameter "description" expected (lib)');
    }
    if (value['author'] == undefined) {
      console.error('Parameter "author" expected (lib)');
    }
    return this.wsRequest('useful_links_update', value);

  }

  useful_links_user_favorite(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_user_favorite', value);

  }

  useful_links_user_favorite_list(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    return this.wsRequest('useful_links_user_favorite_list', value);

  }

  useful_links_user_propose(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * url - string, required (Url) 
    // * description - string, required (Description) 
    // * tags - string, required (tags) 
    if (value['url'] == undefined) {
      console.error('Parameter "url" expected (lib)');
    }
    if (value['description'] == undefined) {
      console.error('Parameter "description" expected (lib)');
    }
    if (value['tags'] == undefined) {
      console.error('Parameter "tags" expected (lib)');
    }
    return this.wsRequest('useful_links_user_propose', value);

  }

  useful_links_user_propose_approve(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_links_propose_id - integer, required (Id of propose for useful_links) 
    if (value['useful_links_propose_id'] == undefined) {
      console.error('Parameter "useful_links_propose_id" expected (lib)');
    }
    return this.wsRequest('useful_links_user_propose_approve', value);

  }

  useful_links_user_unfavorite(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.29
    // Input params:
    // * useful_link_id - integer, required (Id of useful link) 
    if (value['useful_link_id'] == undefined) {
      console.error('Parameter "useful_link_id" expected (lib)');
    }
    return this.wsRequest('useful_links_user_unfavorite', value);

  }

  user(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Deprecated From Version: 0.2.17
    // Input params:
    // * userid - integer, optional (Id of user) 
    return this.wsRequest('user', value);

  }

  user_change_password(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * password_old - string, required (Old password) 
    // * password_new - string, required (New password) 
    if (value['password_old'] == undefined) {
      console.error('Parameter "password_old" expected (lib)');
    }
    if (value['password_new'] == undefined) {
      console.error('Parameter "password_new" expected (lib)');
    }
    return this.wsRequest('user_change_password', value);

  }

  user_reset_password(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * email - string, required (E-mail) 
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    return this.wsRequest('user_reset_password', value);

  }

  user_skills(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * userid - integer, required (Id of user) 
    if (value['userid'] == undefined) {
      console.error('Parameter "userid" expected (lib)');
    }
    return this.wsRequest('user_skills', value);

  }

  user_update(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * userid - integer, required (Id of user) 
    // * nick - string, optional (Nick of user) 
    // * university - string, optional (University of user) 
    // * about - string, optional (About of user) 
    // * country - string, optional (Country of user) 
    if (value['userid'] == undefined) {
      console.error('Parameter "userid" expected (lib)');
    }
    return this.wsRequest('user_update', value);

  }

  users(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * filter_text - string, optional (Filter by user email or nick) 
    // * filter_role - string, optional (Filter by user role) 
    // * onpage - integer, optional (On Page) 
    // * page - integer, optional (Number of page) 
    return this.wsRequest('users', value);

  }

  users_add(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Activated From Version: 0.2.17
    // Input params:
    // * uuid - string, required (User's Global Unique Identifier) 
    // * email - string, required (User's E-mail) 
    // * nick - string, required (User's nick) 
    // * password - string, required (Password) 
    // * role - string, required (User's role) 
    // * university - string, optional (University) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    if (value['nick'] == undefined) {
      console.error('Parameter "nick" expected (lib)');
    }
    if (value['password'] == undefined) {
      console.error('Parameter "password" expected (lib)');
    }
    if (value['role'] == undefined) {
      console.error('Parameter "role" expected (lib)');
    }
    return this.wsRequest('users_add', value);

  }

  users_change_email(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * email - string, required (New E-mail) 
    // * password - string, required (Password) 
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    if (value['password'] == undefined) {
      console.error('Parameter "password" expected (lib)');
    }
    return this.wsRequest('users_change_email', value);

  }

  users_change_email_verification(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Input params:
    // * code - string, required (Verification code) 
    if (value['code'] == undefined) {
      console.error('Parameter "code" expected (lib)');
    }
    return this.wsRequest('users_change_email_verification', value);

  }

  users_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: no
    // Access admin: yes
    // Input params:
    // * userid - integer, required (User's id) 
    // * password - string, required (Admin's password) 
    if (value['userid'] == undefined) {
      console.error('Parameter "userid" expected (lib)');
    }
    if (value['password'] == undefined) {
      console.error('Parameter "password" expected (lib)');
    }
    return this.wsRequest('users_delete', value);

  }

  users_info(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.17
    // Input params:
    // * uuid - integer, required (Global unique identify of user) 
    if (value['uuid'] == undefined) {
      console.error('Parameter "uuid" expected (lib)');
    }
    return this.wsRequest('users_info', value);

  }

  users_registration(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * email - string, required (E-mail) 
    if (value['email'] == undefined) {
      console.error('Parameter "email" expected (lib)');
    }
    return this.wsRequest('users_registration', value);

  }

  users_registration_verification(value: Object): Observable<any> {
    // Access unauthorized: yes
    // Access user: no
    // Access admin: no
    // Input params:
    // * code - string, required (Verification code) 
    if (value['code'] == undefined) {
      console.error('Parameter "code" expected (lib)');
    }
    return this.wsRequest('users_registration_verification', value);

  }

  users_tokens(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.26
    return this.wsRequest('users_tokens', value);

  }

  users_tokens_delete(value: Object): Observable<any> {
    // Access unauthorized: no
    // Access user: yes
    // Access admin: yes
    // Activated From Version: 0.2.27
    // Input params:
    // * tokenid - integer, required (Token ID) 
    if (value['tokenid'] == undefined) {
      console.error('Parameter "tokenid" expected (lib)');
    }
    return this.wsRequest('users_tokens_delete', value);

  }
}